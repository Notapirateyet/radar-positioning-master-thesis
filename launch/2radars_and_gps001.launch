<?xml version="1.0"?>
<launch>
<!-- start of STATIC TF setup -->
  <!-- <node pkg="tf2_ros" type="static_transform_publisher" name="imu_base_tf_broadcaster" args="0 0 0 0 0 0 1 imu_link base_link" /> -->

  <node name="base_link_2_radar0" pkg="tf2_ros" type="static_transform_publisher" args="0 0 0 0 0 0 base_link radar0" />
  <node name="base_link_2_radar0_mse" pkg="tf2_ros" type="static_transform_publisher" args="0 0 0 0 0 0 base_link radar0_mse" />
  <node name="base_link_2_radar1" pkg="tf2_ros" type="static_transform_publisher" args="0 0 0 0.7071068 -0.7071068 0 0 base_link radar1" />
  <node name="base_link_2_radar1_mse" pkg="tf2_ros" type="static_transform_publisher" args="0 0 0 0.7071068 -0.7071068 0 0  base_link radar1_mse" />
  <node pkg="tf2_ros" type="static_transform_publisher" name="base_radar_tf_broadcaster" args="0 0 0 0 0 0 1 base_link radar_link" />
  <node pkg="tf2_ros" type="static_transform_publisher" name="base_imu_tf_broadcaster" args="0 0 0 0 0 0 1 base_link imu_link" />
<!-- end of STATIC TF setup -->

<!-- Start of RADAR setup  -->
    <arg name="config_file" default="$(find umrr_driver)/cfg/config0.yaml" />
    <arg name ="node_namespace" default ="radar" />
    <arg name ="deactivate_radar_pipeline" default="False" />
    <arg name ="filter_settings" default="$(find umrr_driver)/cfg/pc2filter.cfg" />

    <rosparam file="$(arg config_file)" subst_value="true"/>
    <!-- Group nodes to provide convenient way of starting multiple nodes -->
    <group ns="$(arg node_namespace)0">
        <remap from="/radar0/target_list_cartesian" to="/radar/target_list_cartesian"/>
        <node name="umrr_can_publisher" pkg="umrr_driver" type="umrr_can_publisher.py" output="screen" required="true">
                <param name="frame_id" value="$(arg node_namespace)0" />
         </node>
        <!-- provide possibility to start driver without radar pipeline -->
        <group unless="$(arg deactivate_radar_pipeline)">
            <node name="pcl_filter" pkg="umrr_driver" type="pc2_filter.py" output="screen" >
                    <param name="input_topic" value="target_list" />
            </node>
            <node name="coord_converter" pkg="umrr_driver" type="spherical_coord_2_cartesian_coord" output="screen">
                <param name="data_frame" value="" />
                <param name="target_frame" value="" />
            </node>
        </group>
    </group>
    <group ns="$(arg node_namespace)1">
        <remap from="/radar1/target_list_cartesian" to="/radar/target_list_cartesian"/>
        <node name="umrr_can_publisher" pkg="umrr_driver" type="umrr_can_publisher.py" output="screen" required="true">
                <param name="frame_id" value="$(arg node_namespace)1" />
         </node>
        <!-- provide possibility to start driver without radar pipeline -->
        <group unless="$(arg deactivate_radar_pipeline)">
            <node name="pcl_filter" pkg="umrr_driver" type="pc2_filter.py" output="screen" >
                    <param name="input_topic" value="target_list" />
            </node>
            <node name="coord_converter" pkg="umrr_driver" type="spherical_coord_2_cartesian_coord" output="screen">
                <param name="data_frame" value="" />
                <param name="target_frame" value="" />
            </node>
        </group>
    </group>
    <!-- end of RADAR setup -->
    <!-- start of IMU setup -->
        <!-- Use groups if you want to launch several nodes for multiple devices.
    Make sure to use different param files for each sensor. -->
    <!-- <group ns="sensor_1"> 
        <node  name="xsens_mti_node" pkg="xsens_mti_driver" type="xsens_mti_node" output="screen">
            <rosparam command="load" file="$(find xsens_mti_driver)/param/xsens_mti_node.yaml" />
        </node>
    </group>  -->
    <group ns="sensor_2">
        <include file="$(find lse_xsens_mti)/xsensDriver.launch" />      
    </group>
    <!-- end of IMU setup -->
    <!-- start of LOCALIZATION setup -->




</launch>


